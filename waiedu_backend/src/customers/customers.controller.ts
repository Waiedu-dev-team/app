import { 
  Controller, 
  Get, 
  Post, 
  Body, 
  Param, 
  HttpStatus,
  ValidationPipe,
  UsePipes,
  Query
} from '@nestjs/common';
import { 
  ApiTags, 
  ApiOperation, 
  ApiResponse, 
  ApiBody, 
  ApiParam,
  ApiCreatedResponse,
  ApiBadRequestResponse,
  ApiConflictResponse,
  ApiQuery
} from '@nestjs/swagger';
import { CustomersService } from './customers.service';
import { CreateCustomerDto } from './dto/create-customer.dto';
import { Customer } from './entities/customer.entity';

@ApiTags('üè¢ Customer Management')
@Controller('customers')
export class CustomersController {
  constructor(private readonly customersService: CustomersService) {}

  @Post()
  @ApiOperation({ 
    summary: 'üÜï T·∫°o t√†i kho·∫£n kh√°ch h√†ng m·ªõi',
    description: 'Endpoint ƒë·ªÉ t·∫°o t√†i kho·∫£n kh√°ch h√†ng doanh nghi·ªáp v·ªõi ƒë·∫ßy ƒë·ªß th√¥ng tin c√¥ng ty v√† ƒë·ªãa ch·ªâ.'
  })
  @ApiBody({ 
    type: CreateCustomerDto,
    description: 'Th√¥ng tin c·∫ßn thi·∫øt ƒë·ªÉ t·∫°o t√†i kho·∫£n kh√°ch h√†ng',
    examples: {
      'C√¥ng ty C√¥ng ngh·ªá': {
        summary: 'T·∫°o t√†i kho·∫£n c√¥ng ty c√¥ng ngh·ªá',
        value: {
          email: 'contact@techcompany.com',
          fullName: 'Nguy·ªÖn VƒÉn CEO',
          defaultPassword: 'tech123456',
          field: 'technology',
          taxCode: '0123456789',
          city: 'hanoi',
          district: 'hoankiem'
        }
      },
      'C√¥ng ty T√†i ch√≠nh': {
        summary: 'T·∫°o t√†i kho·∫£n c√¥ng ty t√†i ch√≠nh',
        value: {
          email: 'admin@financecompany.com',
          fullName: 'Tr·∫ßn Th·ªã Manager',
          defaultPassword: 'finance789',
          field: 'finance',
          taxCode: '9876543210',
          city: 'hcm',
          district: 'quan1'
        }
      }
    }
  })
  @ApiCreatedResponse({ 
    description: '‚úÖ T√†i kho·∫£n kh√°ch h√†ng ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng',
    type: Customer,
    example: {
      id: '550e8400-e29b-41d4-a716-446655440000',
      email: 'contact@company.com',
      fullName: 'Nguy·ªÖn VƒÉn CEO',
      defaultPassword: 'defaultpass123',
      field: 'technology',
      taxCode: '0123456789',
      city: 'hanoi',
      district: 'hoankiem',
      createdAt: '2024-01-07T12:00:00.000Z',
      updatedAt: '2024-01-07T12:00:00.000Z'
    }
  })
  @ApiBadRequestResponse({ 
    description: '‚ùå D·ªØ li·ªáu ƒë·∫ßu v√†o kh√¥ng h·ª£p l·ªá',
    example: {
      statusCode: 400,
      message: [
        'Email kh√¥ng h·ª£p l·ªá',
        'M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±',
        'H·ªç t√™n kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng',
        'M√£ s·ªë thu·∫ø kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng'
      ],
      error: 'Bad Request'
    }
  })
  @ApiConflictResponse({ 
    description: '‚ö†Ô∏è Email ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng',
    example: {
      statusCode: 409,
      message: 'Email ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng cho kh√°ch h√†ng kh√°c',
      error: 'Conflict'
    }
  })
  @UsePipes(new ValidationPipe({ transform: true, whitelist: true }))
  async create(@Body() createCustomerDto: CreateCustomerDto): Promise<Customer> {
    return this.customersService.create(createCustomerDto);
  }

  @Get()
  @ApiOperation({ 
    summary: 'üìã L·∫•y danh s√°ch kh√°ch h√†ng',
    description: 'L·∫•y danh s√°ch t·∫•t c·∫£ kh√°ch h√†ng trong h·ªá th·ªëng (kh√¥ng bao g·ªìm m·∫≠t kh·∫©u).'
  })
  @ApiResponse({ 
    status: 200, 
    description: '‚úÖ Danh s√°ch kh√°ch h√†ng',
    type: [Customer],
    example: [
      {
        id: '550e8400-e29b-41d4-a716-446655440000',
        email: 'customer1@company.com',
        fullName: 'Nguy·ªÖn VƒÉn A',
        defaultPassword: 'defaultpass123',
        field: 'technology',
        taxCode: '0123456789',
        city: 'hanoi',
        district: 'hoankiem',
        createdAt: '2024-01-07T12:00:00.000Z',
        updatedAt: '2024-01-07T12:00:00.000Z'
      }
    ]
  })
  async findAll(): Promise<Customer[]> {
    return this.customersService.findAll();
  }

  @Get('stats/by-field')
  @ApiOperation({
    summary: 'üìä Th·ªëng k√™ kh√°ch h√†ng theo lƒ©nh v·ª±c',
    description: 'L·∫•y th·ªëng k√™ s·ªë l∆∞·ª£ng kh√°ch h√†ng theo t·ª´ng lƒ©nh v·ª±c kinh doanh.'
  })
  @ApiResponse({
    status: 200,
    description: '‚úÖ Th·ªëng k√™ theo lƒ©nh v·ª±c',
    example: {
      technology: 15,
      finance: 8,
      retail: 12,
      manufacturing: 5
    }
  })
  async getStatsByField(): Promise<{ [key: string]: number }> {
    return this.customersService.getStatsByField();
  }

  @Get('stats/by-location')
  @ApiOperation({
    summary: 'üó∫Ô∏è Th·ªëng k√™ kh√°ch h√†ng theo ƒë·ªãa ph∆∞∆°ng',
    description: 'L·∫•y th·ªëng k√™ s·ªë l∆∞·ª£ng kh√°ch h√†ng theo t·ª´ng th√†nh ph·ªë.'
  })
  @ApiResponse({
    status: 200,
    description: '‚úÖ Th·ªëng k√™ theo ƒë·ªãa ph∆∞∆°ng',
    example: {
      hanoi: 20,
      hcm: 25,
      danang: 10,
      haiphong: 5
    }
  })
  async getStatsByLocation(): Promise<{ [key: string]: number }> {
    return this.customersService.getStatsByLocation();
  }

  @Get('search/by-tax-code/:taxCode')
  @ApiOperation({
    summary: 'üîç T√¨m kh√°ch h√†ng theo m√£ s·ªë thu·∫ø',
    description: 'T√¨m ki·∫øm kh√°ch h√†ng b·∫±ng m√£ s·ªë thu·∫ø doanh nghi·ªáp.'
  })
  @ApiParam({
    name: 'taxCode',
    description: 'M√£ s·ªë thu·∫ø c·∫ßn t√¨m',
    example: '0123456789'
  })
  @ApiResponse({
    status: 200,
    description: '‚úÖ Th√¥ng tin kh√°ch h√†ng',
    type: Customer
  })
  @ApiResponse({
    status: 404,
    description: '‚ùå Kh√¥ng t√¨m th·∫•y kh√°ch h√†ng',
    example: {
      statusCode: 404,
      message: 'Kh√¥ng t√¨m th·∫•y kh√°ch h√†ng v·ªõi m√£ s·ªë thu·∫ø n√†y',
      error: 'Not Found'
    }
  })
  async findByTaxCode(@Param('taxCode') taxCode: string): Promise<Customer> {
    const customer = await this.customersService.findByTaxCode(taxCode);
    if (!customer) {
      throw new Error('Kh√¥ng t√¨m th·∫•y kh√°ch h√†ng v·ªõi m√£ s·ªë thu·∫ø n√†y');
    }
    return customer;
  }

  @Get(':id')
  @ApiOperation({ 
    summary: 'üîç L·∫•y th√¥ng tin kh√°ch h√†ng theo ID',
    description: 'L·∫•y th√¥ng tin chi ti·∫øt c·ªßa m·ªôt kh√°ch h√†ng c·ª• th·ªÉ theo ID.'
  })
  @ApiParam({ 
    name: 'id', 
    description: 'ID c·ªßa kh√°ch h√†ng c·∫ßn l·∫•y th√¥ng tin',
    example: '550e8400-e29b-41d4-a716-446655440000'
  })
  @ApiResponse({ 
    status: 200, 
    description: '‚úÖ Th√¥ng tin kh√°ch h√†ng',
    type: Customer
  })
  @ApiResponse({ 
    status: 404, 
    description: '‚ùå Kh√¥ng t√¨m th·∫•y kh√°ch h√†ng',
    example: {
      statusCode: 404,
      message: 'Kh√¥ng t√¨m th·∫•y kh√°ch h√†ng',
      error: 'Not Found'
    }
  })
  async findOne(@Param('id') id: string): Promise<Customer> {
    const customer = await this.customersService.findOne(id);
    if (!customer) {
      throw new Error('Kh√¥ng t√¨m th·∫•y kh√°ch h√†ng');
    }
    return customer;
  }
} 