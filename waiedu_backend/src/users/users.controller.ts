import { 
  Controller, 
  Get, 
  Post, 
  Body, 
  Param, 
  HttpStatus,
  ValidationPipe,
  UsePipes
} from '@nestjs/common';
import { 
  ApiTags, 
  ApiOperation, 
  ApiResponse, 
  ApiBody, 
  ApiParam,
  ApiCreatedResponse,
  ApiBadRequestResponse,
  ApiConflictResponse
} from '@nestjs/swagger';
import { UsersService } from './users.service';
import { CreateUserDto } from './dto/create-user.dto';
import { User } from './entities/user.entity';

@ApiTags('üë• Users Management')
@Controller('users')
export class UsersController {
  constructor(private readonly usersService: UsersService) {}

  @Post()
  @ApiOperation({ 
    summary: 'üÜï T·∫°o t√†i kho·∫£n m·ªõi',
    description: 'Endpoint ƒë·ªÉ t·∫°o t√†i kho·∫£n ng∆∞·ªùi d√πng m·ªõi trong h·ªá th·ªëng v·ªõi ƒë·∫ßy ƒë·ªß th√¥ng tin c√° nh√¢n v√† ph√¢n quy·ªÅn.'
  })
  @ApiBody({ 
    type: CreateUserDto,
    description: 'Th√¥ng tin c·∫ßn thi·∫øt ƒë·ªÉ t·∫°o t√†i kho·∫£n m·ªõi',
    examples: {
      'Nh√¢n vi√™n IT': {
        summary: 'T·∫°o t√†i kho·∫£n nh√¢n vi√™n IT',
        value: {
          email: 'developer@waiedu.com',
          password: 'password123',
          fullName: 'Nguy·ªÖn VƒÉn Dev',
          department: 'IT',
          role: 'staff'
        }
      },
      'Qu·∫£n l√Ω HR': {
        summary: 'T·∫°o t√†i kho·∫£n qu·∫£n l√Ω nh√¢n s·ª±',
        value: {
          email: 'hr.manager@waiedu.com',
          password: 'securepass456',
          fullName: 'Tr·∫ßn Th·ªã Manager',
          department: 'HR',
          role: 'manager'
        }
      }
    }
  })
  @ApiCreatedResponse({ 
    description: '‚úÖ T√†i kho·∫£n ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng',
    type: User,
    example: {
      id: '550e8400-e29b-41d4-a716-446655440000',
      email: 'user@waiedu.com',
      fullName: 'Nguy·ªÖn VƒÉn A',
      department: 'IT',
      role: 'staff',
      createdAt: '2024-01-07T12:00:00.000Z',
      updatedAt: '2024-01-07T12:00:00.000Z'
    }
  })
  @ApiBadRequestResponse({ 
    description: '‚ùå D·ªØ li·ªáu ƒë·∫ßu v√†o kh√¥ng h·ª£p l·ªá',
    example: {
      statusCode: 400,
      message: [
        'Email kh√¥ng h·ª£p l·ªá',
        'M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±',
        'H·ªç t√™n kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng'
      ],
      error: 'Bad Request'
    }
  })
  @ApiConflictResponse({ 
    description: '‚ö†Ô∏è Email ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng',
    example: {
      statusCode: 409,
      message: 'Email ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng',
      error: 'Conflict'
    }
  })
  @UsePipes(new ValidationPipe({ transform: true, whitelist: true }))
  async create(@Body() createUserDto: CreateUserDto): Promise<User> {
    return this.usersService.create(createUserDto);
  }

  @Get()
  @ApiOperation({ 
    summary: 'üìã L·∫•y danh s√°ch t√†i kho·∫£n',
    description: 'L·∫•y danh s√°ch t·∫•t c·∫£ ng∆∞·ªùi d√πng trong h·ªá th·ªëng (kh√¥ng bao g·ªìm m·∫≠t kh·∫©u).'
  })
  @ApiResponse({ 
    status: 200, 
    description: '‚úÖ Danh s√°ch ng∆∞·ªùi d√πng',
    type: [User],
    example: [
      {
        id: '550e8400-e29b-41d4-a716-446655440000',
        email: 'user1@waiedu.com',
        fullName: 'Nguy·ªÖn VƒÉn A',
        department: 'IT',
        role: 'staff',
        createdAt: '2024-01-07T12:00:00.000Z',
        updatedAt: '2024-01-07T12:00:00.000Z'
      },
      {
        id: '550e8400-e29b-41d4-a716-446655440001',
        email: 'user2@waiedu.com',
        fullName: 'Tr·∫ßn Th·ªã B',
        department: 'HR',
        role: 'manager',
        createdAt: '2024-01-07T13:00:00.000Z',
        updatedAt: '2024-01-07T13:00:00.000Z'
      }
    ]
  })
  async findAll(): Promise<User[]> {
    return this.usersService.findAll();
  }

  @Get(':id')
  @ApiOperation({ 
    summary: 'üîç L·∫•y th√¥ng tin t√†i kho·∫£n theo ID',
    description: 'L·∫•y th√¥ng tin chi ti·∫øt c·ªßa m·ªôt ng∆∞·ªùi d√πng c·ª• th·ªÉ theo ID.'
  })
  @ApiParam({ 
    name: 'id', 
    description: 'ID c·ªßa ng∆∞·ªùi d√πng c·∫ßn l·∫•y th√¥ng tin',
    example: '550e8400-e29b-41d4-a716-446655440000'
  })
  @ApiResponse({ 
    status: 200, 
    description: '‚úÖ Th√¥ng tin ng∆∞·ªùi d√πng',
    type: User
  })
  @ApiResponse({ 
    status: 404, 
    description: '‚ùå Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng',
    example: {
      statusCode: 404,
      message: 'Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng',
      error: 'Not Found'
    }
  })
  async findOne(@Param('id') id: string): Promise<User> {
    const user = await this.usersService.findOne(id);
    if (!user) {
      throw new Error('Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng');
    }
    return user;
  }
} 